use crate::html_elements::common_attributes::Element;
use crate::html_elements::element_structs::*;
use crate::html_elements::global_attr::GlobalAttributes;
use sunbeam_macros;

use log;

#[derive(Debug, Clone)]
pub struct ShadowRoot {}

#[derive(Default, Clone, Debug, sunbeam_macros::ElementTypeUtils)]
pub enum HTMLElementType {
    A(a::A),
    Abbr(abbr::Abbr),
    Address(address::Address),
    Area(area::Area),
    Article(article::Article),
    Aside(aside::Aside),
    Audio(audio::Audio),
    B(b::B),
    Base(base::Base),
    Bdi(bdi::BDI),
    Bdo(bdo::Bdo),
    Blockquote(blockquote::Blockquote),
    Body(body::Body),
    Br(br::Br),
    Button(button::Button),
    Canvas(canvas::Canvas),
    Caption(caption::Caption),
    Cite(cite::Cite),
    Code(code::Code),
    Col(col::Col),
    Colgroup(colgroup::ColGroup),
    Data(data::Data),
    Datalist(datalist::DataList),
    Dd(dd::Dd),
    Del(del::Del),
    Details(details::Details),
    Dfn(dfn::Dfn),
    Dialog(dialog::Dialog),
    Div(div::Div),
    Dl(dl::Dl),
    Dt(dt::Dt),
    Em(em::Em),
    Embed(embed::Embed),
    // Fencedframe(),
    Fieldset(fieldset::Fieldset),
    Figcaption(figcaption::FigCaption),
    Figure(figure::Figure),
    Footer(footer::Footer),
    Form(form::Form),
    Head(head::Head),
    Header(header::Header),
    HGroup(hgroup::HGroup),
    H1(h1::H1),
    H2(h2::H2),
    H3(h3::H3),
    H4(h4::H4),
    H5(h5::H5),
    H6(h6::H6),
    Hr(hr::Hr),
    Html(html::Html),
    I(i::I),
    IFrame(iframe::IFrame),
    Img(img::Img),
    Input(input::Input),
    Ins(ins::Ins),
    Kbd(kbd::Kbd),
    Label(label::Label),
    Legend(legend::Legend),
    Li(li::Li),
    Link(link::Link),
    Main(main::Main),
    Map(map::Map),
    Mark(mark::Mark),
    Menu(menu::Menu),
    Meta(meta::Meta),
    Meter(meter::Meter),
    Nav(nav::Nav),
    Noscript(noscript::Noscript),
    Object(object::Object),
    Ol(ol::Ol),
    Optgroup(optgroup::OptGroup),
    Option(option::HtmlOption),
    Output(output::Output),
    P(p::P),
    Picture(picture::Picture),
    // Portal(),
    Pre(pre::Pre),
    Progress(progress::Progress),
    Q(q::Q),
    Rp(rp::Rp),
    Rt(rt::Rt),
    Ruby(ruby::Ruby),
    S(s::S),
    Samp(samp::Samp),
    Script(script::Script),
    Search(search::Search),
    Section(section::Section),
    Select(select::Select),
    Slot(slot::Slot),
    Small(small::Small),
    Source(source::Source),
    Span(span::Span),
    Strong(strong::Strong),
    Style(style::Style),
    Sub(sub::Sub),
    Summary(summary::Summary),
    Sup(sup::Sup),
    Table(table::Table),
    Tbody(tbody::TBody),
    Td(td::Td),
    Template(template::Template),
    Textarea(textarea::TextArea),
    Tfoot(tfoot::TFoot),
    Th(th::Th),
    THead(thead::THead),
    Time(time::Time),
    Title(title::Title),
    Tr(tr::Tr),
    Track(track::Track),
    U(u::U),
    Ul(ul::Ul),
    Var(var::Var),
    Video(video::Video),
    Wbr(wbr::Wbr),
    #[default]
    Unknown,
}

impl HTMLElementType {
    // TODO: Write a macro to handle this automatically or move to box<dyn Element>
    pub fn add_attribute(&mut self, name: String, value: String) {
        use HTMLElementType::*;
        match self {
            A(ref mut val) => val.add_attribute(name, value),
            Abbr(val) => val.add_attribute(name, value),
            Address(val) => val.add_attribute(name, value),
            Area(val) => val.add_attribute(name, value),
            Article(val) => val.add_attribute(name, value),
            Aside(val) => val.add_attribute(name, value),
            Audio(val) => val.add_attribute(name, value),
            B(val) => val.add_attribute(name, value),
            Base(val) => val.add_attribute(name, value),
            Bdi(val) => val.add_attribute(name, value),
            Bdo(val) => val.add_attribute(name, value),
            Blockquote(val) => val.add_attribute(name, value),
            Body(val) => val.add_attribute(name, value),
            Br(val) => val.add_attribute(name, value),
            Button(val) => val.add_attribute(name, value),
            Canvas(val) => val.add_attribute(name, value),
            Caption(val) => val.add_attribute(name, value),
            Cite(val) => val.add_attribute(name, value),
            Code(val) => val.add_attribute(name, value),
            Col(val) => val.add_attribute(name, value),
            Colgroup(val) => val.add_attribute(name, value),
            Data(val) => val.add_attribute(name, value),
            Datalist(val) => val.add_attribute(name, value),
            Dd(val) => val.add_attribute(name, value),
            Del(val) => val.add_attribute(name, value),
            Details(val) => val.add_attribute(name, value),
            Dfn(val) => val.add_attribute(name, value),
            Dialog(val) => val.add_attribute(name, value),
            Div(val) => val.add_attribute(name, value),
            Dl(val) => val.add_attribute(name, value),
            Dt(val) => val.add_attribute(name, value),
            Em(val) => val.add_attribute(name, value),
            Embed(val) => val.add_attribute(name, value),
            // Fencedframe(val) => val.add_attribute(name, value),
            Fieldset(val) => val.add_attribute(name, value),
            Figcaption(val) => val.add_attribute(name, value),
            Figure(val) => val.add_attribute(name, value),
            Footer(val) => val.add_attribute(name, value),
            Form(val) => val.add_attribute(name, value),
            Head(val) => val.add_attribute(name, value),
            Header(val) => val.add_attribute(name, value),
            HGroup(val) => val.add_attribute(name, value),
            H1(val) => val.add_attribute(name, value),
            H2(val) => val.add_attribute(name, value),
            H3(val) => val.add_attribute(name, value),
            H4(val) => val.add_attribute(name, value),
            H5(val) => val.add_attribute(name, value),
            H6(val) => val.add_attribute(name, value),
            Hr(val) => val.add_attribute(name, value),
            Html(val) => val.add_attribute(name, value),
            I(val) => val.add_attribute(name, value),
            IFrame(val) => val.add_attribute(name, value),
            Img(val) => val.add_attribute(name, value),
            Input(val) => val.add_attribute(name, value),
            Ins(val) => val.add_attribute(name, value),
            Kbd(val) => val.add_attribute(name, value),
            Label(val) => val.add_attribute(name, value),
            Legend(val) => val.add_attribute(name, value),
            Li(val) => val.add_attribute(name, value),
            Link(val) => val.add_attribute(name, value),
            Main(val) => val.add_attribute(name, value),
            Map(val) => val.add_attribute(name, value),
            Mark(val) => val.add_attribute(name, value),
            Menu(val) => val.add_attribute(name, value),
            Meta(val) => val.add_attribute(name, value),
            Meter(val) => val.add_attribute(name, value),
            Nav(val) => val.add_attribute(name, value),
            Noscript(val) => val.add_attribute(name, value),
            Object(val) => val.add_attribute(name, value),
            Ol(val) => val.add_attribute(name, value),
            Optgroup(val) => val.add_attribute(name, value),
            Option(val) => val.add_attribute(name, value),
            Output(val) => val.add_attribute(name, value),
            P(val) => val.add_attribute(name, value),
            Picture(val) => val.add_attribute(name, value),
            // Portal(val) => val.add_attribute(name, value),
            Pre(val) => val.add_attribute(name, value),
            Progress(val) => val.add_attribute(name, value),
            Q(val) => val.add_attribute(name, value),
            Rp(val) => val.add_attribute(name, value),
            Rt(val) => val.add_attribute(name, value),
            Ruby(val) => val.add_attribute(name, value),
            S(val) => val.add_attribute(name, value),
            Samp(val) => val.add_attribute(name, value),
            Script(val) => val.add_attribute(name, value),
            Search(val) => val.add_attribute(name, value),
            Section(val) => val.add_attribute(name, value),
            Select(val) => val.add_attribute(name, value),
            Slot(val) => val.add_attribute(name, value),
            Small(val) => val.add_attribute(name, value),
            Source(val) => val.add_attribute(name, value),
            Span(val) => val.add_attribute(name, value),
            Strong(val) => val.add_attribute(name, value),
            Style(val) => val.add_attribute(name, value),
            Sub(val) => val.add_attribute(name, value),
            Summary(val) => val.add_attribute(name, value),
            Sup(val) => val.add_attribute(name, value),
            Table(val) => val.add_attribute(name, value),
            Tbody(val) => val.add_attribute(name, value),
            Td(val) => val.add_attribute(name, value),
            Template(val) => val.add_attribute(name, value),
            Textarea(val) => val.add_attribute(name, value),
            Tfoot(val) => val.add_attribute(name, value),
            Th(val) => val.add_attribute(name, value),
            THead(val) => val.add_attribute(name, value),
            Time(val) => val.add_attribute(name, value),
            Title(val) => val.add_attribute(name, value),
            Tr(val) => val.add_attribute(name, value),
            Track(val) => val.add_attribute(name, value),
            U(val) => val.add_attribute(name, value),
            Ul(val) => val.add_attribute(name, value),
            Var(val) => val.add_attribute(name, value),
            Video(val) => val.add_attribute(name, value),
            Wbr(val) => val.add_attribute(name, value),
            _ => {}
        }
    }
}

#[derive(Clone, Debug)]
pub struct HTMLElement {
    pub element_type: HTMLElementType,
    pub global_attributes: GlobalAttributes,
    pub local_name: String,
    pub shadow_root: Option<ShadowRoot>,
}

impl HTMLElement {
    pub fn new(name: String) -> HTMLElement {
        use HTMLElementType::*;
        let element_type = match name.as_str() {
            "a" => A(a::A::default()),
            "abbr" => Abbr(abbr::Abbr::default()),
            "address" => Address(address::Address::default()),
            "area" => Area(area::Area::default()),
            "article" => Article(article::Article::default()),
            "aside" => Aside(aside::Aside::default()),
            "audio" => Audio(audio::Audio::default()),
            "b" => B(b::B::default()),
            "base" => Base(base::Base::default()),
            "bdi" => Bdi(bdi::BDI::default()),
            "bdo" => Bdo(bdo::Bdo::default()),
            "blockquote" => Blockquote(blockquote::Blockquote::default()),
            "body" => Body(body::Body::default()),
            "br" => Br(br::Br::default()),
            "button" => Button(button::Button::default()),
            "canvas" => Canvas(canvas::Canvas::default()),
            "caption" => Caption(caption::Caption::default()),
            "cite" => Cite(cite::Cite::default()),
            "code" => Code(code::Code::default()),
            "col" => Col(col::Col::default()),
            "colgroup" => Colgroup(colgroup::ColGroup::default()),
            "data" => Data(data::Data::default()),
            "datalist" => Datalist(datalist::DataList::default()),
            "dd" => Dd(dd::Dd::default()),
            "del" => Del(del::Del::default()),
            "details" => Details(details::Details::default()),
            "dfn" => Dfn(dfn::Dfn::default()),
            "dialog" => Dialog(dialog::Dialog::default()),
            "div" => Div(div::Div::default()),
            "dl" => Dl(dl::Dl::default()),
            "dt" => Dt(dt::Dt::default()),
            "em" => Em(em::Em::default()),
            "embed" => Embed(embed::Embed::default()),
            // "" => Fencedframe(::default()),
            "fieldset" => Fieldset(fieldset::Fieldset::default()),
            "figcaption" => Figcaption(figcaption::FigCaption::default()),
            "figure" => Figure(figure::Figure::default()),
            "footer" => Footer(footer::Footer::default()),
            "form" => Form(form::Form::default()),
            "head" => Head(head::Head::default()),
            "header" => Header(header::Header::default()),
            "hgroup" => HGroup(hgroup::HGroup::default()),
            "h1" => H1(h1::H1::default()),
            "h2" => H2(h2::H2::default()),
            "h3" => H3(h3::H3::default()),
            "h4" => H4(h4::H4::default()),
            "h5" => H5(h5::H5::default()),
            "h6" => H6(h6::H6::default()),
            "hr" => Hr(hr::Hr::default()),
            "html" => Html(html::Html::default()),
            "i" => I(i::I::default()),
            "iframe" => IFrame(iframe::IFrame::default()),
            "img" | "image" => Img(img::Img::default()),
            "input" => Input(input::Input::default()),
            "ins" => Ins(ins::Ins::default()),
            "kbd" => Kbd(kbd::Kbd::default()),
            "label" => Label(label::Label::default()),
            "legend" => Legend(legend::Legend::default()),
            "li" => Li(li::Li::default()),
            "link" => Link(link::Link::default()),
            "main" => Main(main::Main::default()),
            "map" => Map(map::Map::default()),
            "mark" => Mark(mark::Mark::default()),
            "menu" => Menu(menu::Menu::default()),
            "meta" => Meta(meta::Meta::default()),
            "meter" => Meter(meter::Meter::default()),
            "nav" => Nav(nav::Nav::default()),
            "noscript" => Noscript(noscript::Noscript::default()),
            "object" => Object(object::Object::default()),
            "ol" => Ol(ol::Ol::default()),
            "optgroup" => Optgroup(optgroup::OptGroup::default()),
            "option" => Option(option::HtmlOption::default()),
            "output" => Output(output::Output::default()),
            "p" => P(p::P::default()),
            "picture" => Picture(picture::Picture::default()),
            // "" => Portal(::default()),
            "pre" | "plaintext" => Pre(pre::Pre::default()),
            "progress" => Progress(progress::Progress::default()),
            "q" => Q(q::Q::default()),
            "rp" => Rp(rp::Rp::default()),
            "rt" => Rt(rt::Rt::default()),
            "ruby" => Ruby(ruby::Ruby::default()),
            "s" => S(s::S::default()),
            "samp" => Samp(samp::Samp::default()),
            "script" => Script(script::Script::default()),
            "search" => Search(search::Search::default()),
            "section" => Section(section::Section::default()),
            "select" => Select(select::Select::default()),
            "slot" => Slot(slot::Slot::default()),
            "small" => Small(small::Small::default()),
            "source" => Source(source::Source::default()),
            "span" => Span(span::Span::default()),
            "strong" => Strong(strong::Strong::default()),
            "style" => Style(style::Style::default()),
            "sub" => Sub(sub::Sub::default()),
            "summary" => Summary(summary::Summary::default()),
            "sup" => Sup(sup::Sup::default()),
            "table" => Table(table::Table::default()),
            "tbody" => Tbody(tbody::TBody::default()),
            "td" => Td(td::Td::default()),
            "template" => Template(template::Template::default()),
            "textarea" => Textarea(textarea::TextArea::default()),
            "tfoot" => Tfoot(tfoot::TFoot::default()),
            "th" => Th(th::Th::default()),
            "thead" => THead(thead::THead::default()),
            "time" => Time(time::Time::default()),
            "title" => Title(title::Title::default()),
            "tr" => Tr(tr::Tr::default()),
            "track" => Track(track::Track::default()),
            "u" => U(u::U::default()),
            "ul" => Ul(ul::Ul::default()),
            "var" => Var(var::Var::default()),
            "video" => Video(video::Video::default()),
            "wbr" => Wbr(wbr::Wbr::default()),
            _ => {
                log::debug!("Unknown element: {}", name);
                Unknown
            }
        };

        HTMLElement {
            element_type,
            global_attributes: GlobalAttributes::default(),
            local_name: String::new(),
            shadow_root: None,
        }
    }

    pub fn from_element_type(element: HTMLElementType) -> HTMLElement {
        HTMLElement {
            element_type: element,
            global_attributes: GlobalAttributes::default(),
            local_name: String::new(),
            shadow_root: None,
        }
    }

    pub fn add_attribute(&mut self, name: String, value: String) {
        if !self.global_attributes.add_attribute(name, value) {
            // TODO: Insert to local attribute
        }
    }

    pub fn get_name(&self) -> &str {
        self.element_type.get_name()
    }
}
